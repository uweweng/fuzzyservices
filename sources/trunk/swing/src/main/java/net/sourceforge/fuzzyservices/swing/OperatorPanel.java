/*
 * OperatorPanel.java
 *
 * Created on 2. Februar 2008, 12:16
 */

package net.sourceforge.fuzzyservices.swing;

import org.jdesktop.application.Action;

/**
 *
 * @author  Administrator
 */
public class OperatorPanel extends javax.swing.JPanel {
    
    /** Creates new form OperatorPanel */
    public OperatorPanel() {
        super();
        initComponents();
    }
    
    /** Creates new form OperatorPanel
     * @param model model for this component
     */
    public OperatorPanel(OperatorModel model) {
        this();
        setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        withLabel = new javax.swing.JLabel();
        parameterTextField = new javax.swing.JTextField();
        defaultCheckBox = new javax.swing.JCheckBox();

        setName("OperatorPanel"); // NOI18N
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        nameLabel.setLabelFor(typeComboBox);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mydesktopapplication.MyDesktopApplication.class).getContext().getResourceMap(OperatorPanel.class);
        nameLabel.setText(resourceMap.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N
        add(nameLabel);

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mydesktopapplication.MyDesktopApplication.class).getContext().getActionMap(OperatorPanel.class, this);
        typeComboBox.setAction(actionMap.get("selectOperatorType")); // NOI18N
        typeComboBox.setName("typeComboBox"); // NOI18N
        add(typeComboBox);

        withLabel.setText(resourceMap.getString("withLabel.text")); // NOI18N
        withLabel.setName("withLabel"); // NOI18N
        add(withLabel);

        parameterTextField.setColumns(5);
        parameterTextField.setName("parameterTextField"); // NOI18N
        add(parameterTextField);

        defaultCheckBox.setAction(actionMap.get("setDefaultOperator")); // NOI18N
        defaultCheckBox.setName("defaultCheckBox"); // NOI18N
        add(defaultCheckBox);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void selectOperatorType() {
        if (model != null) {
            model.setSelectedOperatorName((String)typeComboBox.getSelectedItem());
        }
    }

    @Action
    public void setDefaultOperator() {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JCheckBox defaultCheckBox;
    javax.swing.JLabel nameLabel;
    javax.swing.JTextField parameterTextField;
    javax.swing.JComboBox typeComboBox;
    javax.swing.JLabel withLabel;
    // End of variables declaration//GEN-END:variables
    /** Bound property name for <code>model</code>. */
    public static final String MODEL_PROPERTY = "model";
    private OperatorModel model = new DefaultOperatorModel();

    /**
     * Defines a new model for this component.
     * @param model The new value for the property.
     * @see #getModel
     */
    public void setModel(OperatorModel model) {
        OperatorModel oldModel = this.model;
        this.model = model;
        firePropertyChange(MODEL_PROPERTY, oldModel, model);
    }

    /**
     * Returns the model of this component.
     * @return the <code>model</code> property
     * @see #setModel
     */
    public OperatorModel getModel() {
        return model;
    }

    @Action
    public void parameterEntered() {
        if (model != null) {
            try {
                model.setParameter(Float.valueOf(parameterTextField.getText()));
            } catch (NumberFormatException numberFormatException) {
                parameterTextField.setText(Float.toString(model.getParameter()));
            }
        }
    }
    
}
