/*******************************************************************************
 *
 *  Copyright (C) 2007  Uwe Weng
 *
 *  This file is part of Fuzzy Services, a library for processing fuzzy
 *  information.
 *
 *  Fuzzy Services are free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  Fuzzy Services are distributed in the hope that they will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Fuzzy Services; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *  The license is also available at http://www.gnu.org/licenses/gpl.txt
 *
 ******************************************************************************/
package net.sourceforge.fuzzyservices.swing;

import org.jdesktop.application.Action;


/**
 *
 * @author Uwe Weng
 */
public class RuleDialog extends javax.swing.JDialog {
    // End of variables declaration//GEN-END:variables
    /** Bound property name for <code>model</code>. */
    public static final String MODEL_PROPERTY = "model";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    net.sourceforge.fuzzyservices.swing.OperatorPanel aggregationOperatorPanel;
    net.sourceforge.fuzzyservices.swing.AntecedentPanel antecedentPanel;
    javax.swing.JPanel buttonPanel;
    javax.swing.JButton cancelButton;
    javax.swing.JLabel certaintyLabel;
    net.sourceforge.fuzzyservices.swing.OperatorPanel certaintyOperatorPanel;
    javax.swing.JPanel certaintyPanel;
    javax.swing.JSpinner certaintySpinner;
    net.sourceforge.fuzzyservices.swing.ConsequentPanel consequentPanel;
    javax.swing.JPanel editorPanel;
    net.sourceforge.fuzzyservices.swing.OperatorPanel inferenceOperatorPanel;
    javax.swing.JButton okButton;
    private RuleModel model = new DefaultRuleModel();

    /** Creates new form RuleDialog
     * @param parent parent of this component
     * @param modal modal property
     */
    public RuleDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** Creates new form RuleDialog
     * @param parent parent of this component
     * @param modal modal property
     * @param model model for this component
     */
    public RuleDialog(java.awt.Frame parent, boolean modal, RuleModel model) {
        this(parent, modal);
        setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        editorPanel = new javax.swing.JPanel();
        antecedentPanel = new net.sourceforge.fuzzyservices.swing.AntecedentPanel();
        consequentPanel = new net.sourceforge.fuzzyservices.swing.ConsequentPanel();
        inferenceOperatorPanel = new net.sourceforge.fuzzyservices.swing.OperatorPanel();
        aggregationOperatorPanel = new net.sourceforge.fuzzyservices.swing.OperatorPanel();
        certaintyOperatorPanel = new net.sourceforge.fuzzyservices.swing.OperatorPanel();
        certaintyPanel = new javax.swing.JPanel();
        certaintyLabel = new javax.swing.JLabel();
        certaintySpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mydesktopapplication.MyDesktopApplication.class)
                                                                                               .getContext()
                                                                                               .getResourceMap(RuleDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        buttonPanel.setName("buttonPanel"); // NOI18N
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mydesktopapplication.MyDesktopApplication.class)
                                                                              .getContext()
                                                                              .getActionMap(RuleDialog.class,
                this);
        cancelButton.setAction(actionMap.get("cancel")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        buttonPanel.add(cancelButton);

        okButton.setAction(actionMap.get("ok")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        buttonPanel.add(okButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        editorPanel.setName("editorPanel"); // NOI18N
        editorPanel.setLayout(new javax.swing.BoxLayout(editorPanel,
                javax.swing.BoxLayout.Y_AXIS));

        antecedentPanel.setName("antecedentPanel"); // NOI18N
        editorPanel.add(antecedentPanel);

        consequentPanel.setName("consequentPanel"); // NOI18N
        editorPanel.add(consequentPanel);

        inferenceOperatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                resourceMap.getString("inferenceOperatorPanel.border.title"))); // NOI18N
        inferenceOperatorPanel.setName("inferenceOperatorPanel"); // NOI18N
        editorPanel.add(inferenceOperatorPanel);

        aggregationOperatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                resourceMap.getString("aggregationOperatorPanel.border.title"))); // NOI18N
        aggregationOperatorPanel.setName("aggregationOperatorPanel"); // NOI18N
        editorPanel.add(aggregationOperatorPanel);

        certaintyOperatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                resourceMap.getString("certaintyOperatorPanel.border.title"))); // NOI18N
        certaintyOperatorPanel.setName("certaintyOperatorPanel"); // NOI18N
        editorPanel.add(certaintyOperatorPanel);

        certaintyPanel.setName("certaintyPanel"); // NOI18N
        certaintyPanel.setLayout(new java.awt.FlowLayout(
                java.awt.FlowLayout.LEFT));

        certaintyLabel.setLabelFor(certaintySpinner);
        certaintyLabel.setText(resourceMap.getString("certaintyLabel.text")); // NOI18N
        certaintyLabel.setName("certaintyLabel"); // NOI18N
        certaintyPanel.add(certaintyLabel);

        certaintySpinner.setName("certaintySpinner"); // NOI18N
        certaintyPanel.add(certaintySpinner);

        editorPanel.add(certaintyPanel);

        getContentPane().add(editorPanel, java.awt.BorderLayout.CENTER);

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
                public final void run() {
                    RuleDialog dialog = new RuleDialog(new javax.swing.JFrame(),
                            true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                            public final void windowClosing(
                                java.awt.event.WindowEvent e) {
                                System.exit(0);
                            }
                        });
                    dialog.setVisible(true);
                }
            });
    }

    @Action
    public final void ok() {
    }

    @Action
    public final void cancel() {
    }

    /**
     * Defines a new model for this component.
     * @param model The new value for the property.
     * @see #getModel
     */
    public final void setModel(RuleModel model) {
        RuleModel oldModel = this.model;
        this.model = model;
        firePropertyChange(MODEL_PROPERTY, oldModel, model);
    }

    /**
     * Returns the model of this component.
     * @return the <code>model</code> property
     * @see #setModel
     */
    public RuleModel getModel() {
        return model;
    }
}
